package templates

import "go-template/domain/entities"
import "go-template/internal/types"
import "fmt"

templ Users(user *entities.User, usersData *types.UserListResponse) {
	@Layout("User Management", user) {
		<!-- Page header -->
		<div class="bg-white shadow rounded-lg px-6 py-4 mb-6">
			<div class="sm:flex sm:items-center sm:justify-between">
				<div class="sm:flex-auto">
					<h1 class="text-2xl font-bold text-gray-900">User Management</h1>
					<p class="mt-2 text-sm text-gray-700">
						Manage user accounts, permissions, and access levels.
					</p>
				</div>
				if user.AccountType == entities.AccountTypeAdmin || user.AccountType == entities.AccountTypeSuperAdmin {
					<div class="mt-4 sm:mt-0 sm:ml-4 sm:flex-shrink-0">
						<button type="button" 
								onclick="openCreateUserModal()"
								class="inline-flex items-center rounded-md bg-admin-600 px-4 py-2 text-sm font-semibold text-white shadow-sm hover:bg-admin-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-admin-600">
							<svg class="-ml-0.5 mr-1.5 h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
								<path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z"/>
							</svg>
							Add User
						</button>
					</div>
				}
			</div>
		</div>

		<!-- Filters and search -->
		<div class="bg-white shadow rounded-lg mb-6">
			<div class="px-4 py-5 sm:px-6">
				<div class="flex flex-col space-y-4 sm:flex-row sm:space-y-0 sm:space-x-4 sm:items-center sm:justify-between">
					<div class="flex flex-col space-y-4 sm:flex-row sm:space-y-0 sm:space-x-4 sm:flex-1">
						<!-- Search -->
						<div class="flex-1 min-w-0">
							<label for="search" class="sr-only">Search users</label>
							<div class="relative rounded-md shadow-sm">
								<input type="text" name="search" id="search" 
									   class="block w-full rounded-md border-0 py-2 pr-10 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-admin-600 sm:text-sm sm:leading-6" 
									   placeholder="Search users..."
									   hx-get="/api/users"
									   hx-trigger="input changed delay:300ms"
									   hx-target="#users-table"
									   hx-include="[name='account_type']"/>
								<div class="absolute inset-y-0 right-0 flex items-center pr-3">
									<svg class="h-4 w-4 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z"/>
									</svg>
								</div>
							</div>
						</div>

						<!-- Account type filter -->
						<div class="w-full sm:w-48">
							<select id="account_type" name="account_type"
									class="block w-full rounded-md border-0 py-2 pl-3 pr-10 text-gray-900 ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-admin-600 sm:text-sm sm:leading-6"
									hx-get="/api/users"
									hx-trigger="change"
									hx-target="#users-table"
									hx-include="[name='search']">
								<option value="">All Account Types</option>
								<option value="user">Regular Users</option>
								<option value="admin">Administrators</option>
								<option value="super_admin">Super Administrators</option>
							</select>
						</div>
					</div>

					<div class="flex-shrink-0">
						<button type="button" 
								class="inline-flex items-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-admin-500 transition-colors duration-200"
								hx-get="/api/users"
								hx-trigger="click"
								hx-target="#users-table">
							<svg class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0 3.181 3.183a8.25 8.25 0 0 0 13.803-3.7M4.031 9.865a8.25 8.25 0 0 1 13.803-3.7l3.181 3.182m0-4.991v4.99"/>
							</svg>
							Refresh
						</button>
					</div>
				</div>
			</div>
		</div>

		<!-- Users table -->
		<div>
			<div id="users-table" 
				 hx-get="/api/users" 
				 hx-trigger="load"
				 hx-indicator=".users-loading">
				@UsersTable(usersData, user)
			</div>
		</div>

		<!-- Loading indicator -->
		<div class="users-loading htmx-indicator">
			<div class="fixed top-20 right-4 bg-white rounded-lg shadow-lg p-3 z-50">
				<div class="flex items-center">
					<svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-admin-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
						<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
						<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
					</svg>
					<span class="text-sm text-gray-600">Loading users...</span>
				</div>
			</div>
		</div>

		<!-- Pagination -->
		if usersData != nil && usersData.TotalPages > 1 {
			<div class="mt-6 flex items-center justify-between border-t border-gray-200 bg-white px-4 py-3 sm:px-6 rounded-lg shadow">
				<div class="flex flex-1 justify-between sm:hidden">
					if usersData.Page > 1 {
						<a href={ templ.URL("/users?page=" + fmt.Sprintf("%d", usersData.Page-1)) }
						   class="relative inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50">
							Previous
						</a>
					}
					if usersData.Page < usersData.TotalPages {
						<a href={ templ.URL("/users?page=" + fmt.Sprintf("%d", usersData.Page+1)) }
						   class="relative ml-3 inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50">
							Next
						</a>
					}
				</div>
				<div class="hidden sm:flex sm:flex-1 sm:items-center sm:justify-between">
					<div>
						<p class="text-sm text-gray-700">
							Showing
							<span class="font-medium">{ fmt.Sprintf("%d", (usersData.Page-1)*usersData.PageSize+1) }</span>
							to
							<span class="font-medium">{ fmt.Sprintf("%d", min(usersData.Page*usersData.PageSize, int(usersData.Total))) }</span>
							of
							<span class="font-medium">{ fmt.Sprintf("%d", usersData.Total) }</span>
							results
						</p>
					</div>
					<div>
						<nav class="isolate inline-flex -space-x-px rounded-md shadow-sm">
							@PaginationButton(usersData.Page-1, "Previous", usersData.Page > 1, false)
							for i := max(1, usersData.Page-2); i <= min(usersData.TotalPages, usersData.Page+2); i++ {
								@PaginationButton(i, fmt.Sprintf("%d", i), true, i == usersData.Page)
							}
							@PaginationButton(usersData.Page+1, "Next", usersData.Page < usersData.TotalPages, false)
						</nav>
					</div>
				</div>
			</div>
		}

		<!-- Create User Modal -->
		<div id="createUserModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50 hidden">
			<div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
				<div class="mt-3">
					<div class="flex items-center justify-between mb-4">
						<h3 class="text-lg font-medium text-gray-900">Create New User</h3>
						<button type="button" onclick="closeCreateUserModal()" class="text-gray-400 hover:text-gray-600">
							<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
							</svg>
						</button>
					</div>
					
					<form id="createUserForm" hx-post="/users/create" hx-target="#users-table" hx-swap="outerHTML">
						<div class="mb-4">
							<label for="create_email" class="block text-sm font-medium text-gray-700 mb-2">
								Email Address
							</label>
							<input type="email" 
								   id="create_email" 
								   name="email" 
								   required
								   class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-admin-500 focus:border-admin-500 sm:text-sm"
								   placeholder="user@example.com">
							<div class="mt-1 text-sm text-red-600 hidden" id="email-error"></div>
						</div>
						
						<div class="mb-4">
							<label for="create_password" class="block text-sm font-medium text-gray-700 mb-2">
								Password
							</label>
							<input type="password" 
								   id="create_password" 
								   name="password" 
								   required
								   minlength="8"
								   class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-admin-500 focus:border-admin-500 sm:text-sm"
								   placeholder="Enter password">
							<div class="mt-1 text-sm text-red-600 hidden" id="password-error"></div>
						</div>
						
						<div class="mb-6">
							<label for="create_account_type" class="block text-sm font-medium text-gray-700 mb-2">
								Account Type
							</label>
							<select id="create_account_type" 
									name="account_type" 
									required
									class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-admin-500 focus:border-admin-500 sm:text-sm">
								<option value="">Select account type</option>
								<option value="user">Regular User</option>
								if user.AccountType == entities.AccountTypeSuperAdmin {
									<option value="admin">Administrator</option>
									<option value="super_admin">Super Administrator</option>
								}
							</select>
							<div class="mt-1 text-sm text-red-600 hidden" id="account-type-error"></div>
						</div>

						<div class="mb-6">
							<label for="create_auth_provider" class="block text-sm font-medium text-gray-700 mb-2">
								Authentication Provider
							</label>
							<select id="create_auth_provider" 
									name="auth_provider" 
									required
									class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-admin-500 focus:border-admin-500 sm:text-sm"
									hx-get="/settings/auth-providers"
									hx-trigger="load"
									hx-swap="innerHTML">
								<option value="">Select authentication provider</option>
								<option value="supabase" selected>Supabase</option>
							</select>
							<div class="mt-1 text-sm text-red-600 hidden" id="auth-provider-error"></div>
							<p class="mt-1 text-sm text-gray-500">Choose which authentication provider to use for this user</p>
						</div>
						
						<div class="flex justify-end space-x-3">
							<button type="button" 
									onclick="closeCreateUserModal()"
									class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-admin-500">
								Cancel
							</button>
							<button type="submit" 
									class="px-4 py-2 text-sm font-medium text-white bg-admin-600 border border-transparent rounded-md shadow-sm hover:bg-admin-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-admin-500">
								<span class="htmx-indicator">
									<svg class="inline w-4 h-4 mr-2 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 2v4m6.364.636L16.95 8.05M22 12h-4m-.636 6.364L15.95 15.05M12 22v-4M5.636 17.364L7.05 15.95M2 12h4m.636-6.364L8.05 7.05"></path>
									</svg>
									Creating...
								</span>
								<span class="htmx-indicator-hidden">Create User</span>
							</button>
						</div>
					</form>
				</div>
			</div>
		</div>

		<!-- Edit User Modal -->
		<div id="editUserModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50 hidden">
			<div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
				<div class="mt-3">
					<div class="flex items-center justify-between mb-4">
						<h3 class="text-lg font-medium text-gray-900">Edit User</h3>
						<button type="button" onclick="closeEditUserModal()" class="text-gray-400 hover:text-gray-600">
							<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
							</svg>
						</button>
					</div>
					
					<form id="editUserForm" hx-post="/users/update" hx-target="#users-table" hx-swap="outerHTML">
						<input type="hidden" id="edit_user_id" name="user_id" />
						
						<div class="mb-4">
							<label for="edit_email" class="block text-sm font-medium text-gray-700 mb-2">
								Email Address
							</label>
							<input type="email" 
								   id="edit_email" 
								   name="email" 
								   required
								   class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-admin-500 focus:border-admin-500 sm:text-sm"
								   placeholder="user@example.com">
							<div class="mt-1 text-sm text-red-600 hidden" id="edit-email-error"></div>
						</div>
						
						<div class="mb-6">
							<label for="edit_account_type" class="block text-sm font-medium text-gray-700 mb-2">
								Account Type
							</label>
							<select id="edit_account_type" 
									name="account_type" 
									required
									class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-admin-500 focus:border-admin-500 sm:text-sm">
								<option value="">Select account type</option>
								<option value="user">Regular User</option>
								<option value="admin">Administrator</option>
								<option value="super_admin">Super Administrator</option>
							</select>
							<div class="mt-1 text-sm text-red-600 hidden" id="edit-account-type-error"></div>
						</div>
						
						<div class="flex justify-end space-x-3">
							<button type="button" 
									onclick="closeEditUserModal()"
									class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-admin-500">
								Cancel
							</button>
							<button type="submit" 
									class="px-4 py-2 text-sm font-medium text-white bg-admin-600 border border-transparent rounded-md shadow-sm hover:bg-admin-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-admin-500">
								<span class="htmx-indicator">
									<svg class="inline w-4 h-4 mr-2 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 2v4m6.364.636L16.95 8.05M22 12h-4m-.636 6.364L15.95 15.05M12 22v-4M5.636 17.364L7.05 15.95M2 12h4m.636-6.364L8.05 7.05"></path>
									</svg>
									Updating...
								</span>
								<span class="htmx-indicator-hidden">Update User</span>
							</button>
						</div>
					</form>
				</div>
			</div>
		</div>

		<script>
			function openCreateUserModal() {
				document.getElementById('createUserModal').classList.remove('hidden');
				document.getElementById('create_email').focus();
			}
			
			function closeCreateUserModal() {
				document.getElementById('createUserModal').classList.add('hidden');
				document.getElementById('createUserForm').reset();
				// Clear error messages
				const errors = document.querySelectorAll('[id$="-error"]');
				errors.forEach(error => error.classList.add('hidden'));
			}

			function openEditUserModal() {
				document.getElementById('editUserModal').classList.remove('hidden');
				document.getElementById('edit_email').focus();
			}
			
			function closeEditUserModal() {
				document.getElementById('editUserModal').classList.add('hidden');
				document.getElementById('editUserForm').reset();
				// Clear error messages
				const editErrors = document.querySelectorAll('[id^="edit-"][id$="-error"]');
				editErrors.forEach(error => error.classList.add('hidden'));
			}
			
			// Close modal when clicking outside
			document.getElementById('createUserModal').addEventListener('click', function(e) {
				if (e.target === this) {
					closeCreateUserModal();
				}
			});
			
			// Close edit modal when clicking outside
			document.getElementById('editUserModal').addEventListener('click', function(e) {
				if (e.target === this) {
					closeEditUserModal();
				}
			});

			// Handle form submission success
			document.addEventListener('htmx:afterRequest', function(evt) {
				// Check if this is a request from the create user form
				if (evt.detail.requestConfig && evt.detail.requestConfig.path === '/users/create') {
					if (evt.detail.xhr.status === 200 || evt.detail.xhr.status === 201) {
						closeCreateUserModal();
						// Show success message
						showNotification('User created successfully', 'success');
					} else {
						// Handle validation errors
						try {
							const response = JSON.parse(evt.detail.xhr.response);
							if (response.errors) {
								Object.keys(response.errors).forEach(field => {
									const errorEl = document.getElementById(field + '-error');
									if (errorEl) {
										errorEl.textContent = response.errors[field];
										errorEl.classList.remove('hidden');
									}
								});
							}
						} catch (e) {
							showNotification('Failed to create user', 'error');
						}
					}
				}
				
				// Check if this is a request from the edit user form
				if (evt.detail.requestConfig && evt.detail.requestConfig.path === '/users/update') {
					if (evt.detail.xhr.status === 200 || evt.detail.xhr.status === 201) {
						closeEditUserModal();
						// Show success message
						showNotification('User updated successfully', 'success');
					} else {
						// Handle validation errors
						try {
							const response = JSON.parse(evt.detail.xhr.response);
							if (response.errors) {
								Object.keys(response.errors).forEach(field => {
									const errorEl = document.getElementById('edit-' + field + '-error');
									if (errorEl) {
										errorEl.textContent = response.errors[field];
										errorEl.classList.remove('hidden');
									}
								});
							}
						} catch (e) {
							showNotification('Failed to update user', 'error');
						}
					}
				}
			});
			
			function showNotification(message, type = 'info') {
				const notification = document.createElement('div');
				notification.className = `fixed top-4 right-4 px-4 py-2 rounded-md shadow-lg z-50 ${
					type === 'success' ? 'bg-green-500 text-white' : 
					type === 'error' ? 'bg-red-500 text-white' : 
					'bg-blue-500 text-white'
				}`;
				notification.textContent = message;
				document.body.appendChild(notification);
				
				setTimeout(() => {
					notification.remove();
				}, 3000);
			}
		</script>
	}
}

templ UsersTable(usersData *types.UserListResponse, currentUser *entities.User) {
	<div class="bg-white shadow overflow-hidden sm:rounded-lg">
		if usersData == nil || len(usersData.Users) == 0 {
			<div class="text-center py-12">
				<div class="mx-auto h-12 w-12 text-gray-400">
					@Icon("users", "h-12 w-12")
				</div>
				<h3 class="mt-2 text-sm font-medium text-gray-900">No users found</h3>
				<p class="mt-1 text-sm text-gray-500">Get started by creating a new user account.</p>
			</div>
		} else {
			<!-- Table header -->
			<div class="hidden sm:block border-b border-gray-200 bg-gray-50 px-6 py-3">
				<div class="grid grid-cols-12 gap-4 items-center">
					<div class="col-span-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
						User
					</div>
					<div class="col-span-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
						Role
					</div>
					<div class="col-span-2 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
						Created
					</div>
					<div class="col-span-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
						Actions
					</div>
				</div>
			</div>
			
			<!-- User rows -->
			<ul role="list" class="divide-y divide-gray-200">
				for _, targetUser := range usersData.Users {
					@UserRow(&targetUser, currentUser)
				}
			</ul>
		}
	</div>
}

templ UserRow(targetUser *entities.User, currentUser *entities.User) {
	<li class="px-6 py-4 hover:bg-gray-50">
		<!-- Desktop layout -->
		<div class="hidden sm:block">
			<div class="grid grid-cols-12 gap-4 items-center">
				<!-- User Info (4 columns) -->
				<div class="col-span-4 flex items-center min-w-0">
					<div class="h-10 w-10 flex-shrink-0">
						<div class="h-10 w-10 rounded-full bg-admin-500 flex items-center justify-center text-white font-medium text-sm uppercase">
							{ string(targetUser.Email[0]) }
						</div>
					</div>
					<div class="ml-4 min-w-0 flex-1">
						<div class="text-sm font-medium text-gray-900 truncate">{ targetUser.Email }</div>
						<div class="text-xs text-gray-500 truncate">ID: { targetUser.ID.String() }</div>
					</div>
				</div>
				
				<!-- Account Type Badge (3 columns) -->
				<div class="col-span-3 flex justify-center">
					switch targetUser.AccountType {
						case entities.AccountTypeSuperAdmin:
							<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800 whitespace-nowrap">
								@Icon("shield-check", "h-3 w-3 mr-1")
								Super Admin
							</span>
						case entities.AccountTypeAdmin:
							<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 whitespace-nowrap">
								@Icon("shield-check", "h-3 w-3 mr-1")
								Admin
							</span>
						default:
							<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800 whitespace-nowrap">
								<svg class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
								</svg>
								User
							</span>
					}
				</div>

				<!-- Created Date (2 columns) -->
				<div class="col-span-2 text-center">
					<div class="text-sm text-gray-500 whitespace-nowrap">
						{ targetUser.CreatedAt.Format("Jan 2, 2006") }
					</div>
				</div>

				<!-- Actions (3 columns) -->
				<div class="col-span-3 flex items-center justify-end space-x-3">
					<button type="button" 
							onclick={ editUser(targetUser.ID.String()) }
							class="inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded-md text-admin-700 bg-admin-100 hover:bg-admin-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-admin-500 transition-colors duration-200">
						<svg class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
						</svg>
						Edit
					</button>
					
					if (currentUser.AccountType == entities.AccountTypeAdmin || currentUser.AccountType == entities.AccountTypeSuperAdmin) && targetUser.AccountType != entities.AccountTypeSuperAdmin {
						<button type="button" 
								onclick={ confirmDeleteUser(targetUser.ID.String(), targetUser.Email) }
								class="inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded-md text-red-700 bg-red-100 hover:bg-red-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors duration-200">
							<svg class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
							</svg>
							Delete
						</button>
					}
				</div>
			</div>
		</div>
		
		<!-- Mobile layout -->
		<div class="sm:hidden">
			<div class="flex items-center justify-between">
				<div class="flex items-center min-w-0 flex-1">
					<div class="h-10 w-10 flex-shrink-0">
						<div class="h-10 w-10 rounded-full bg-admin-500 flex items-center justify-center text-white font-medium text-sm uppercase">
							{ string(targetUser.Email[0]) }
						</div>
					</div>
					<div class="ml-4 min-w-0 flex-1">
						<div class="text-sm font-medium text-gray-900 truncate">{ targetUser.Email }</div>
						<div class="flex items-center space-x-2 mt-1">
							switch targetUser.AccountType {
								case entities.AccountTypeSuperAdmin:
									<span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
										Super Admin
									</span>
								case entities.AccountTypeAdmin:
									<span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
										Admin
									</span>
								default:
									<span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
										User
									</span>
							}
							<span class="text-xs text-gray-500">
								{ targetUser.CreatedAt.Format("Jan 2") }
							</span>
						</div>
					</div>
				</div>
				
				<div class="flex items-center space-x-2 ml-4">
					<button type="button" 
							onclick={ editUser(targetUser.ID.String()) }
							class="inline-flex items-center p-1.5 border border-transparent text-xs font-medium rounded-md text-admin-700 bg-admin-100 hover:bg-admin-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-admin-500">
						<svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
						</svg>
					</button>
					
					if (currentUser.AccountType == entities.AccountTypeAdmin || currentUser.AccountType == entities.AccountTypeSuperAdmin) && targetUser.AccountType != entities.AccountTypeSuperAdmin {
						<button type="button" 
								onclick={ confirmDeleteUser(targetUser.ID.String(), targetUser.Email) }
								class="inline-flex items-center p-1.5 border border-transparent text-xs font-medium rounded-md text-red-700 bg-red-100 hover:bg-red-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
							<svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
							</svg>
						</button>
					}
				</div>
			</div>
		</div>
	</li>
}

templ PaginationButton(page int, text string, enabled bool, isActive bool) {
	if enabled {
		<a href={ templ.URL("/users?page=" + fmt.Sprintf("%d", page)) }
		   class={ "relative inline-flex items-center px-4 py-2 text-sm font-semibold ring-1 ring-inset ring-gray-300 focus:z-10 focus:outline-offset-0",
				   templ.KV("bg-admin-600 text-white focus:ring-admin-600", isActive),
				   templ.KV("text-gray-900 hover:bg-gray-50 focus:ring-gray-300", !isActive) }>
			{ text }
		</a>
	} else {
		<span class="relative inline-flex items-center px-4 py-2 text-sm font-semibold text-gray-400 ring-1 ring-inset ring-gray-300">
			{ text }
		</span>
	}
}

// Helper functions
func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}

templ RecentUsers(users []entities.User) {
	if len(users) == 0 {
		<div class="text-center text-gray-500">
			<p>No recent users</p>
		</div>
	} else {
		<div class="space-y-3">
			for _, user := range users {
				<div class="flex items-center space-x-3">
					<div class="h-8 w-8 flex-shrink-0">
						<div class="h-8 w-8 rounded-full bg-admin-500 flex items-center justify-center text-white font-medium text-xs">
							{ string(user.Email[0]) }
						</div>
					</div>
					<div class="flex-1 min-w-0">
						<p class="text-sm font-medium text-gray-900 truncate">{ user.Email }</p>
						<p class="text-sm text-gray-500">
							{ user.AccountType.String() } • { user.CreatedAt.Format("Jan 2") }
						</p>
					</div>
				</div>
			}
		</div>
	}
}

// JavaScript helper functions
script editUser(userID string) {
	// Load user data and open edit modal
	console.log('Loading user data for ID:', userID);
	
	// Use fetch API instead of htmx.ajax for better control
	fetch('/users/' + userID, {
		method: 'GET',
		headers: {
			'HX-Request': 'true',
			'Content-Type': 'application/json'
		}
	})
	.then(function(response) {
		console.log('Response status:', response.status);
		if (!response.ok) {
			throw new Error('Network response was not ok: ' + response.status);
		}
		return response.text();
	})
	.then(function(responseText) {
		console.log('Response received:', responseText);
		try {
			const user = JSON.parse(responseText);
			console.log('Parsed user data:', user);
			
			// Populate edit form
			document.getElementById('edit_user_id').value = user.id || user.ID;
			document.getElementById('edit_email').value = user.email || user.Email;
			document.getElementById('edit_account_type').value = user.account_type || user.AccountType;
			
			console.log('Form populated successfully');
			// Open edit modal
			openEditUserModal();
		} catch (parseError) {
			console.error('Failed to parse response:', parseError);
			console.error('Raw response:', responseText);
			showNotification('Failed to parse user data', 'error');
		}
	})
	.catch(function(error) {
		console.error('Failed to load user data:', error);
		showNotification('Failed to load user data', 'error');
	});
}

script confirmDeleteUser(userID string, email string) {
	if (confirm("Are you sure you want to delete user " + email + "?")) {
		// Use HTMX to delete user
		htmx.ajax('POST', '/users/delete', {
			values: { user_id: userID },
			target: '#users-table',
			swap: 'outerHTML'
		});
	}
}