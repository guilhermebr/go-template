package templates

import (
	"fmt"
	"go-template/domain/entities"
)

type DashboardStats struct {
	TotalUsers     int64
	AdminUsers     int64
	ActiveSessions int64
	SystemAlerts   int64
}

type DashboardData struct {
	UserEmail   string
	AccountType string
	Stats       DashboardStats
}

templ Dashboard(data DashboardData) {
	@AdminLayout("Dashboard", data.UserEmail) {
		<div class="space-y-6">
			<!-- Header -->
			<div class="bg-white shadow rounded-lg p-6">
				<h1 class="text-2xl font-bold text-gray-900">Dashboard</h1>
				<p class="text-gray-600 mt-1">Welcome back, { data.UserEmail }</p>
				<div class="mt-2">
					<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
						{ data.AccountType }
					</span>
				</div>
			</div>
			<!-- Stats Cards -->
			<div class="grid grid-cols-1 md:grid-cols-3 gap-6">
				<div class="bg-white overflow-hidden shadow rounded-lg">
					<div class="p-5">
						<div class="flex items-center">
							<div class="flex-shrink-0">
								<svg class="h-8 w-8 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
								</svg>
							</div>
							<div class="ml-5 w-0 flex-1">
								<dl>
									<dt class="text-sm font-medium text-gray-500 truncate">
										Total Users
									</dt>
									<dd class="text-lg font-medium text-gray-900">
										{ fmt.Sprintf("%d", data.Stats.TotalUsers) }
									</dd>
								</dl>
							</div>
						</div>
					</div>
				</div>
				<div class="bg-white overflow-hidden shadow rounded-lg">
					<div class="p-5">
						<div class="flex items-center">
							<div class="flex-shrink-0">
								<svg class="h-8 w-8 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
								</svg>
							</div>
							<div class="ml-5 w-0 flex-1">
								<dl>
									<dt class="text-sm font-medium text-gray-500 truncate">
										Active Sessions
									</dt>
									<dd class="text-lg font-medium text-gray-900">
										{ fmt.Sprintf("%d", data.Stats.ActiveSessions) }
									</dd>
								</dl>
							</div>
						</div>
					</div>
				</div>
				<div class="bg-white overflow-hidden shadow rounded-lg">
					<div class="p-5">
						<div class="flex items-center">
							<div class="flex-shrink-0">
								<svg class="h-8 w-8 text-yellow-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
								</svg>
							</div>
							<div class="ml-5 w-0 flex-1">
								<dl>
									<dt class="text-sm font-medium text-gray-500 truncate">
										System Alerts
									</dt>
									<dd class="text-lg font-medium text-gray-900">
										{ fmt.Sprintf("%d", data.Stats.SystemAlerts) }
									</dd>
								</dl>
							</div>
						</div>
					</div>
				</div>
			</div>
			<!-- Recent Activity -->
			<div class="bg-white shadow rounded-lg">
				<div class="px-6 py-4 border-b border-gray-200">
					<h2 class="text-lg font-medium text-gray-900">Recent Activity</h2>
				</div>
				<div class="px-6 py-4">
					<div class="flow-root">
						<ul class="-mb-8">
							<li>
								<div class="relative pb-8">
									<span class="absolute top-4 left-4 -ml-px h-full w-0.5 bg-gray-200" aria-hidden="true"></span>
									<div class="relative flex space-x-3">
										<div>
											<span class="h-8 w-8 rounded-full bg-green-500 flex items-center justify-center ring-8 ring-white">
												<svg class="h-5 w-5 text-white" fill="currentColor" viewBox="0 0 20 20">
													<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
												</svg>
											</span>
										</div>
										<div class="min-w-0 flex-1 pt-1.5 flex justify-between space-x-4">
											<div>
												<p class="text-sm text-gray-500">Admin panel accessed by <span class="font-medium text-gray-900">{ data.UserEmail }</span></p>
											</div>
											<div class="text-right text-sm whitespace-nowrap text-gray-500">
												<time>Just now</time>
											</div>
										</div>
									</div>
								</div>
							</li>
						</ul>
					</div>
				</div>
			</div>
		</div>
	}
}

templ UsersList(users []entities.User) {
	@AdminLayout("Users", "") {
		<div class="space-y-6">
			<div class="bg-white shadow rounded-lg p-6">
				<h1 class="text-2xl font-bold text-gray-900">Users Management</h1>
				<p class="text-gray-600 mt-1">Manage system users and permissions</p>
			</div>
			<div class="bg-white shadow rounded-lg overflow-hidden">
				if len(users) == 0 {
					<div class="p-6">
						<p class="text-gray-500">No users found.</p>
					</div>
				} else {
					<table class="min-w-full divide-y divide-gray-200">
						<thead class="bg-gray-50">
							<tr>
								<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
								<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Role</th>
								<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Created</th>
								<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
							</tr>
						</thead>
						<tbody class="bg-white divide-y divide-gray-200">
							for _, user := range users {
								<tr>
									<td class="px-6 py-4 whitespace-nowrap">
										<div class="text-sm font-medium text-gray-900">{ user.Email }</div>
									</td>
									<td class="px-6 py-4 whitespace-nowrap">
										<span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-purple-100 text-purple-800">
											{ user.AccountType.String() }
										</span>
									</td>
									<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
										{ user.CreatedAt.Format("Jan 2, 2006") }
									</td>
									<td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
										<a href={ "/admin/users/" + user.ID.String() } class="text-indigo-600 hover:text-indigo-900 mr-4">View</a>
										<button class="text-red-600 hover:text-red-900">Delete</button>
									</td>
								</tr>
							}
						</tbody>
					</table>
				}
			</div>
		</div>
	}
}

templ UserView(user entities.User) {
	@AdminLayout("User Details", "") {
		<div class="space-y-6">
			<div class="bg-white shadow rounded-lg p-6">
				<h1 class="text-2xl font-bold text-gray-900">User Details</h1>
				<p class="text-gray-600 mt-1">View and manage user information</p>
			</div>
			<div class="bg-white shadow rounded-lg p-6">
				<dl class="grid grid-cols-1 gap-x-4 gap-y-6 sm:grid-cols-2">
					<div>
						<dt class="text-sm font-medium text-gray-500">Email</dt>
						<dd class="mt-1 text-sm text-gray-900">{ user.Email }</dd>
					</div>
					<div>
						<dt class="text-sm font-medium text-gray-500">Account Type</dt>
						<dd class="mt-1 text-sm text-gray-900">
							<span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-purple-100 text-purple-800">
								{ user.AccountType.String() }
							</span>
						</dd>
					</div>
					<div>
						<dt class="text-sm font-medium text-gray-500">Created At</dt>
						<dd class="mt-1 text-sm text-gray-900">{ user.CreatedAt.Format("January 2, 2006 at 3:04 PM") }</dd>
					</div>
					<div>
						<dt class="text-sm font-medium text-gray-500">Updated At</dt>
						<dd class="mt-1 text-sm text-gray-900">{ user.UpdatedAt.Format("January 2, 2006 at 3:04 PM") }</dd>
					</div>
				</dl>
				<div class="mt-6 flex space-x-3">
					<a href="/admin/users" class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-gray-600 hover:bg-gray-700">
						Back to Users
					</a>
					<button class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-red-600 hover:bg-red-700">
						Delete User
					</button>
				</div>
			</div>
		</div>
	}
}

templ Settings(settings map[string]interface{}) {
	@AdminLayout("Settings", "") {
		<div class="space-y-6">
			<div class="bg-white shadow rounded-lg p-6">
				<h1 class="text-2xl font-bold text-gray-900">System Settings</h1>
				<p class="text-gray-600 mt-1">Configure system-wide settings (Super Admin only)</p>
			</div>
			<div class="bg-white shadow rounded-lg p-6">
				if len(settings) == 0 {
					<p class="text-gray-500">No settings available.</p>
				} else {
					<dl class="grid grid-cols-1 gap-4 sm:grid-cols-2">
						for key, value := range settings {
							<div class="border rounded-lg p-4">
								<dt class="text-sm font-medium text-gray-500">{ key }</dt>
								<dd class="mt-1 text-sm text-gray-900">{ fmt.Sprintf("%v", value) }</dd>
							</div>
						}
					</dl>
				}
			</div>
		</div>
	}
}