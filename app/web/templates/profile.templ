package templates

import "go-template/domain/entities"

templ Profile(user interface{}) {
	@Layout("Profile", user.(*entities.User)) {
		<div class="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
			<!-- Header -->
			<div class="mb-8">
				<h1 class="text-2xl font-bold text-gray-900 sm:text-3xl">Profile Settings</h1>
				<p class="mt-2 text-gray-600">
					Manage your account information and preferences.
				</p>
			</div>

			<!-- Profile Information -->
			<div class="bg-white shadow rounded-lg mb-8">
				<div class="px-4 py-5 sm:p-6">
					<h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">Personal Information</h3>
					
					<form class="space-y-6" method="POST" action="/profile">
						<div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
							<div class="sm:col-span-2">
								<label for="email" class="block text-sm font-medium text-gray-700">
									Email address
								</label>
								<div class="mt-1 relative">
									<input 
										type="email" 
										name="email" 
										id="email" 
										value={ user.(*entities.User).Email }
										class="shadow-sm focus:ring-brand-500 focus:border-brand-500 block w-full sm:text-sm border-gray-300 rounded-md bg-gray-50" 
										disabled/>
									<div class="absolute inset-y-0 right-0 pr-3 flex items-center">
										<svg class="h-5 w-5 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
											<path fill-rule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clip-rule="evenodd"/>
										</svg>
									</div>
								</div>
								<p class="mt-1 text-xs text-gray-500">Email cannot be changed for security reasons.</p>
							</div>

							<div>
								<label for="account_type" class="block text-sm font-medium text-gray-700">
									Account Type
								</label>
								<div class="mt-1">
									<input 
										type="text" 
										name="account_type" 
										id="account_type" 
										value={ string(user.(*entities.User).AccountType) }
										class="shadow-sm focus:ring-brand-500 focus:border-brand-500 block w-full sm:text-sm border-gray-300 rounded-md bg-gray-50" 
										disabled/>
								</div>
								<p class="mt-1 text-xs text-gray-500">Contact support to change account type.</p>
							</div>

							<div>
								<label for="auth_provider" class="block text-sm font-medium text-gray-700">
									Authentication Provider
								</label>
								<div class="mt-1">
									<input 
										type="text" 
										name="auth_provider" 
										id="auth_provider" 
										value={ user.(*entities.User).AuthProvider }
										class="shadow-sm focus:ring-brand-500 focus:border-brand-500 block w-full sm:text-sm border-gray-300 rounded-md bg-gray-50" 
										disabled/>
								</div>
							</div>

							<div>
								<label for="created_at" class="block text-sm font-medium text-gray-700">
									Member Since
								</label>
								<div class="mt-1">
									<input 
										type="text" 
										name="created_at" 
										id="created_at" 
										value={ user.(*entities.User).CreatedAt.Format("January 2, 2006") }
										class="shadow-sm focus:ring-brand-500 focus:border-brand-500 block w-full sm:text-sm border-gray-300 rounded-md bg-gray-50" 
										disabled/>
								</div>
							</div>

							<div>
								<label for="user_id" class="block text-sm font-medium text-gray-700">
									User ID
								</label>
								<div class="mt-1 relative">
									<input 
										type="text" 
										name="user_id" 
										id="user_id" 
										value={ user.(*entities.User).ID.String() }
										class="shadow-sm focus:ring-brand-500 focus:border-brand-500 block w-full sm:text-sm border-gray-300 rounded-md bg-gray-50 font-mono text-xs" 
										disabled/>
									<button 
										type="button" 
										onclick="copyToClipboard(this.previousElementSibling.value)"
										class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600">
										<svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"/>
										</svg>
									</button>
								</div>
								<p class="mt-1 text-xs text-gray-500">Click the copy button to copy to clipboard.</p>
							</div>
						</div>
					</form>
				</div>
			</div>

			<!-- Security Section -->
			<div class="bg-white shadow rounded-lg mb-8">
				<div class="px-4 py-5 sm:p-6">
					<h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">Security</h3>
					
					<div class="space-y-6">
						<div class="flex items-start justify-between">
							<div class="flex-1">
								<h4 class="text-sm font-medium text-gray-900">Password</h4>
								<p class="text-sm text-gray-500 mt-1">
									Your password is managed through { user.(*entities.User).AuthProvider }. 
									To change your password, please visit their platform.
								</p>
							</div>
							<button 
								type="button" 
								disabled
								class="ml-5 bg-gray-100 border border-gray-300 rounded-md shadow-sm py-2 px-3 text-sm leading-4 font-medium text-gray-400 cursor-not-allowed">
								Managed Externally
							</button>
						</div>

						<div class="border-t border-gray-200 pt-6">
							<div class="flex items-start justify-between">
								<div class="flex-1">
									<h4 class="text-sm font-medium text-gray-900">Account Deletion</h4>
									<p class="text-sm text-gray-500 mt-1">
										Permanently delete your account and all associated data. This action cannot be undone.
									</p>
								</div>
								<button 
									type="button" 
									onclick="confirmAccountDeletion()"
									class="ml-5 bg-red-600 border border-transparent rounded-md shadow-sm py-2 px-3 text-sm leading-4 font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
									Delete Account
								</button>
							</div>
						</div>
					</div>
				</div>
			</div>

			<!-- API Access -->
			<div class="bg-white shadow rounded-lg">
				<div class="px-4 py-5 sm:p-6">
					<h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">API Access</h3>
					
					<div class="space-y-4">
						<div>
							<p class="text-sm text-gray-500">
								Use these resources to integrate with our API:
							</p>
						</div>
						
						<div class="grid grid-cols-1 gap-3 sm:grid-cols-2">
							<a href="/docs" class="relative block p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
								<div class="flex items-start">
									<div class="flex-shrink-0">
										<svg class="h-5 w-5 text-brand-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
										</svg>
									</div>
									<div class="ml-3">
										<p class="text-sm font-medium text-gray-900">API Documentation</p>
										<p class="text-sm text-gray-500">Complete API reference</p>
									</div>
								</div>
							</a>
							
							<a href="/docs/swagger-ui.html" class="relative block p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
								<div class="flex items-start">
									<div class="flex-shrink-0">
										<svg class="h-5 w-5 text-brand-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1.586a1 1 0 01.707.293l2.414 2.414a1 1 0 00.707.293H15M13 16h-3a2 2 0 01-2-2V9a2 2 0 012-2h3m7 11V8a2 2 0 00-2-2h-4l-2-2H9a2 2 0 00-2 2v11a2 2 0 002 2h10a2 2 0 002-2z"/>
										</svg>
									</div>
									<div class="ml-3">
										<p class="text-sm font-medium text-gray-900">Interactive API</p>
										<p class="text-sm text-gray-500">Test endpoints directly</p>
									</div>
								</div>
							</a>
						</div>
					</div>
				</div>
			</div>
		</div>

		<!-- Account Deletion Modal -->
		<div id="deleteModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
			<div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
				<div class="mt-3 text-center">
					<div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100">
						<svg class="h-6 w-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"/>
						</svg>
					</div>
					<h3 class="text-lg font-medium text-gray-900 mt-5">Delete Account</h3>
					<div class="mt-2 px-7 py-3">
						<p class="text-sm text-gray-500">
							Are you sure you want to delete your account? This action cannot be undone and all your data will be permanently removed.
						</p>
					</div>
					<div class="items-center px-4 py-3">
						<button 
							id="confirmDelete" 
							class="px-4 py-2 bg-red-600 text-white text-base font-medium rounded-md shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 mr-2">
							Delete Account
						</button>
						<button 
							onclick="closeDeleteModal()" 
							class="px-4 py-2 bg-gray-300 text-gray-800 text-base font-medium rounded-md shadow-sm hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-300">
							Cancel
						</button>
					</div>
				</div>
			</div>
		</div>

		<script>
			function copyToClipboard(text) {
				navigator.clipboard.writeText(text).then(function() {
					// You could add a toast notification here
					alert('Copied to clipboard!');
				}).catch(function(err) {
					console.error('Failed to copy: ', err);
				});
			}

			function confirmAccountDeletion() {
				document.getElementById('deleteModal').classList.remove('hidden');
			}

			function closeDeleteModal() {
				document.getElementById('deleteModal').classList.add('hidden');
			}

			// Add event listener for confirm delete (you would implement the actual deletion logic)
			document.getElementById('confirmDelete').addEventListener('click', function() {
				// Implement account deletion logic here
				alert('Account deletion would be implemented here');
				closeDeleteModal();
			});

			// Close modal when clicking outside
			document.getElementById('deleteModal').addEventListener('click', function(e) {
				if (e.target === this) {
					closeDeleteModal();
				}
			});
		</script>
	}
}