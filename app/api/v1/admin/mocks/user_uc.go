// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/gofrs/uuid/v5"
	"go-template/domain/entities"
	"sync"
)

// UserUseCaseMock is a mock implementation of admin.UserUseCase.
//
//	func TestSomethingThatUsesUserUseCase(t *testing.T) {
//
//		// make and configure a mocked admin.UserUseCase
//		mockedUserUseCase := &UserUseCaseMock{
//			GetUserByIDFunc: func(ctx context.Context, id uuid.UUID) (entities.User, error) {
//				panic("mock out the GetUserByID method")
//			},
//		}
//
//		// use mockedUserUseCase in code that requires admin.UserUseCase
//		// and then make assertions.
//
//	}
type UserUseCaseMock struct {
	// GetUserByIDFunc mocks the GetUserByID method.
	GetUserByIDFunc func(ctx context.Context, id uuid.UUID) (entities.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetUserByID holds details about calls to the GetUserByID method.
		GetUserByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
	}
	lockGetUserByID sync.RWMutex
}

// GetUserByID calls GetUserByIDFunc.
func (mock *UserUseCaseMock) GetUserByID(ctx context.Context, id uuid.UUID) (entities.User, error) {
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetUserByID.Lock()
	mock.calls.GetUserByID = append(mock.calls.GetUserByID, callInfo)
	mock.lockGetUserByID.Unlock()
	if mock.GetUserByIDFunc == nil {
		var (
			userOut entities.User
			errOut  error
		)
		return userOut, errOut
	}
	return mock.GetUserByIDFunc(ctx, id)
}

// GetUserByIDCalls gets all the calls that were made to GetUserByID.
// Check the length with:
//
//	len(mockedUserUseCase.GetUserByIDCalls())
func (mock *UserUseCaseMock) GetUserByIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockGetUserByID.RLock()
	calls = mock.calls.GetUserByID
	mock.lockGetUserByID.RUnlock()
	return calls
}
