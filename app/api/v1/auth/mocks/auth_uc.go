// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"go-template/domain/auth"
	"sync"
)

// AuthUseCaseMock is a mock implementation of auth.AuthUseCase.
//
//	func TestSomethingThatUsesAuthUseCase(t *testing.T) {
//
//		// make and configure a mocked auth.AuthUseCase
//		mockedAuthUseCase := &AuthUseCaseMock{
//			LoginFunc: func(ctx context.Context, req auth.LoginRequest) (auth.AuthResponse, error) {
//				panic("mock out the Login method")
//			},
//		}
//
//		// use mockedAuthUseCase in code that requires auth.AuthUseCase
//		// and then make assertions.
//
//	}
type AuthUseCaseMock struct {
	// LoginFunc mocks the Login method.
	LoginFunc func(ctx context.Context, req auth.LoginRequest) (auth.AuthResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// Login holds details about calls to the Login method.
		Login []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req auth.LoginRequest
		}
	}
	lockLogin sync.RWMutex
}

// Login calls LoginFunc.
func (mock *AuthUseCaseMock) Login(ctx context.Context, req auth.LoginRequest) (auth.AuthResponse, error) {
	callInfo := struct {
		Ctx context.Context
		Req auth.LoginRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockLogin.Lock()
	mock.calls.Login = append(mock.calls.Login, callInfo)
	mock.lockLogin.Unlock()
	if mock.LoginFunc == nil {
		var (
			authResponseOut auth.AuthResponse
			errOut          error
		)
		return authResponseOut, errOut
	}
	return mock.LoginFunc(ctx, req)
}

// LoginCalls gets all the calls that were made to Login.
// Check the length with:
//
//	len(mockedAuthUseCase.LoginCalls())
func (mock *AuthUseCaseMock) LoginCalls() []struct {
	Ctx context.Context
	Req auth.LoginRequest
} {
	var calls []struct {
		Ctx context.Context
		Req auth.LoginRequest
	}
	mock.lockLogin.RLock()
	calls = mock.calls.Login
	mock.lockLogin.RUnlock()
	return calls
}
