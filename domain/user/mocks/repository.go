// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/gofrs/uuid/v5"
	"go-template/domain/entities"
	"sync"
)

// RepositoryMock is a mock implementation of user.Repository.
//
//	func TestSomethingThatUsesRepository(t *testing.T) {
//
//		// make and configure a mocked user.Repository
//		mockedRepository := &RepositoryMock{
//			CountUsersFunc: func(ctx context.Context) (int64, error) {
//				panic("mock out the CountUsers method")
//			},
//			CountUsersByAccountTypeFunc: func(ctx context.Context, accountType entities.AccountType) (int64, error) {
//				panic("mock out the CountUsersByAccountType method")
//			},
//			CreateFunc: func(ctx context.Context, user entities.User) error {
//				panic("mock out the Create method")
//			},
//			DeleteFunc: func(ctx context.Context, id uuid.UUID) error {
//				panic("mock out the Delete method")
//			},
//			GetByEmailFunc: func(ctx context.Context, email string) (entities.User, error) {
//				panic("mock out the GetByEmail method")
//			},
//			GetByIDFunc: func(ctx context.Context, id uuid.UUID) (entities.User, error) {
//				panic("mock out the GetByID method")
//			},
//			GetUserStatsFunc: func(ctx context.Context) (entities.UserStats, error) {
//				panic("mock out the GetUserStats method")
//			},
//			ListUsersFunc: func(ctx context.Context, params entities.ListUsersParams) ([]entities.User, error) {
//				panic("mock out the ListUsers method")
//			},
//			UpdateFunc: func(ctx context.Context, user entities.User) error {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedRepository in code that requires user.Repository
//		// and then make assertions.
//
//	}
type RepositoryMock struct {
	// CountUsersFunc mocks the CountUsers method.
	CountUsersFunc func(ctx context.Context) (int64, error)

	// CountUsersByAccountTypeFunc mocks the CountUsersByAccountType method.
	CountUsersByAccountTypeFunc func(ctx context.Context, accountType entities.AccountType) (int64, error)

	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, user entities.User) error

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, id uuid.UUID) error

	// GetByEmailFunc mocks the GetByEmail method.
	GetByEmailFunc func(ctx context.Context, email string) (entities.User, error)

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(ctx context.Context, id uuid.UUID) (entities.User, error)

	// GetUserStatsFunc mocks the GetUserStats method.
	GetUserStatsFunc func(ctx context.Context) (entities.UserStats, error)

	// ListUsersFunc mocks the ListUsers method.
	ListUsersFunc func(ctx context.Context, params entities.ListUsersParams) ([]entities.User, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, user entities.User) error

	// calls tracks calls to the methods.
	calls struct {
		// CountUsers holds details about calls to the CountUsers method.
		CountUsers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// CountUsersByAccountType holds details about calls to the CountUsersByAccountType method.
		CountUsersByAccountType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountType is the accountType argument value.
			AccountType entities.AccountType
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// User is the user argument value.
			User entities.User
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// GetByEmail holds details about calls to the GetByEmail method.
		GetByEmail []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Email is the email argument value.
			Email string
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// GetUserStats holds details about calls to the GetUserStats method.
		GetUserStats []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ListUsers holds details about calls to the ListUsers method.
		ListUsers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params entities.ListUsersParams
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// User is the user argument value.
			User entities.User
		}
	}
	lockCountUsers              sync.RWMutex
	lockCountUsersByAccountType sync.RWMutex
	lockCreate                  sync.RWMutex
	lockDelete                  sync.RWMutex
	lockGetByEmail              sync.RWMutex
	lockGetByID                 sync.RWMutex
	lockGetUserStats            sync.RWMutex
	lockListUsers               sync.RWMutex
	lockUpdate                  sync.RWMutex
}

// CountUsers calls CountUsersFunc.
func (mock *RepositoryMock) CountUsers(ctx context.Context) (int64, error) {
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockCountUsers.Lock()
	mock.calls.CountUsers = append(mock.calls.CountUsers, callInfo)
	mock.lockCountUsers.Unlock()
	if mock.CountUsersFunc == nil {
		var (
			nOut   int64
			errOut error
		)
		return nOut, errOut
	}
	return mock.CountUsersFunc(ctx)
}

// CountUsersCalls gets all the calls that were made to CountUsers.
// Check the length with:
//
//	len(mockedRepository.CountUsersCalls())
func (mock *RepositoryMock) CountUsersCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockCountUsers.RLock()
	calls = mock.calls.CountUsers
	mock.lockCountUsers.RUnlock()
	return calls
}

// CountUsersByAccountType calls CountUsersByAccountTypeFunc.
func (mock *RepositoryMock) CountUsersByAccountType(ctx context.Context, accountType entities.AccountType) (int64, error) {
	callInfo := struct {
		Ctx         context.Context
		AccountType entities.AccountType
	}{
		Ctx:         ctx,
		AccountType: accountType,
	}
	mock.lockCountUsersByAccountType.Lock()
	mock.calls.CountUsersByAccountType = append(mock.calls.CountUsersByAccountType, callInfo)
	mock.lockCountUsersByAccountType.Unlock()
	if mock.CountUsersByAccountTypeFunc == nil {
		var (
			nOut   int64
			errOut error
		)
		return nOut, errOut
	}
	return mock.CountUsersByAccountTypeFunc(ctx, accountType)
}

// CountUsersByAccountTypeCalls gets all the calls that were made to CountUsersByAccountType.
// Check the length with:
//
//	len(mockedRepository.CountUsersByAccountTypeCalls())
func (mock *RepositoryMock) CountUsersByAccountTypeCalls() []struct {
	Ctx         context.Context
	AccountType entities.AccountType
} {
	var calls []struct {
		Ctx         context.Context
		AccountType entities.AccountType
	}
	mock.lockCountUsersByAccountType.RLock()
	calls = mock.calls.CountUsersByAccountType
	mock.lockCountUsersByAccountType.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *RepositoryMock) Create(ctx context.Context, user entities.User) error {
	callInfo := struct {
		Ctx  context.Context
		User entities.User
	}{
		Ctx:  ctx,
		User: user,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	if mock.CreateFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.CreateFunc(ctx, user)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedRepository.CreateCalls())
func (mock *RepositoryMock) CreateCalls() []struct {
	Ctx  context.Context
	User entities.User
} {
	var calls []struct {
		Ctx  context.Context
		User entities.User
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *RepositoryMock) Delete(ctx context.Context, id uuid.UUID) error {
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	if mock.DeleteFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeleteFunc(ctx, id)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedRepository.DeleteCalls())
func (mock *RepositoryMock) DeleteCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// GetByEmail calls GetByEmailFunc.
func (mock *RepositoryMock) GetByEmail(ctx context.Context, email string) (entities.User, error) {
	callInfo := struct {
		Ctx   context.Context
		Email string
	}{
		Ctx:   ctx,
		Email: email,
	}
	mock.lockGetByEmail.Lock()
	mock.calls.GetByEmail = append(mock.calls.GetByEmail, callInfo)
	mock.lockGetByEmail.Unlock()
	if mock.GetByEmailFunc == nil {
		var (
			userOut entities.User
			errOut  error
		)
		return userOut, errOut
	}
	return mock.GetByEmailFunc(ctx, email)
}

// GetByEmailCalls gets all the calls that were made to GetByEmail.
// Check the length with:
//
//	len(mockedRepository.GetByEmailCalls())
func (mock *RepositoryMock) GetByEmailCalls() []struct {
	Ctx   context.Context
	Email string
} {
	var calls []struct {
		Ctx   context.Context
		Email string
	}
	mock.lockGetByEmail.RLock()
	calls = mock.calls.GetByEmail
	mock.lockGetByEmail.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *RepositoryMock) GetByID(ctx context.Context, id uuid.UUID) (entities.User, error) {
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	if mock.GetByIDFunc == nil {
		var (
			userOut entities.User
			errOut  error
		)
		return userOut, errOut
	}
	return mock.GetByIDFunc(ctx, id)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedRepository.GetByIDCalls())
func (mock *RepositoryMock) GetByIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// GetUserStats calls GetUserStatsFunc.
func (mock *RepositoryMock) GetUserStats(ctx context.Context) (entities.UserStats, error) {
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetUserStats.Lock()
	mock.calls.GetUserStats = append(mock.calls.GetUserStats, callInfo)
	mock.lockGetUserStats.Unlock()
	if mock.GetUserStatsFunc == nil {
		var (
			userStatsOut entities.UserStats
			errOut       error
		)
		return userStatsOut, errOut
	}
	return mock.GetUserStatsFunc(ctx)
}

// GetUserStatsCalls gets all the calls that were made to GetUserStats.
// Check the length with:
//
//	len(mockedRepository.GetUserStatsCalls())
func (mock *RepositoryMock) GetUserStatsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetUserStats.RLock()
	calls = mock.calls.GetUserStats
	mock.lockGetUserStats.RUnlock()
	return calls
}

// ListUsers calls ListUsersFunc.
func (mock *RepositoryMock) ListUsers(ctx context.Context, params entities.ListUsersParams) ([]entities.User, error) {
	callInfo := struct {
		Ctx    context.Context
		Params entities.ListUsersParams
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockListUsers.Lock()
	mock.calls.ListUsers = append(mock.calls.ListUsers, callInfo)
	mock.lockListUsers.Unlock()
	if mock.ListUsersFunc == nil {
		var (
			usersOut []entities.User
			errOut   error
		)
		return usersOut, errOut
	}
	return mock.ListUsersFunc(ctx, params)
}

// ListUsersCalls gets all the calls that were made to ListUsers.
// Check the length with:
//
//	len(mockedRepository.ListUsersCalls())
func (mock *RepositoryMock) ListUsersCalls() []struct {
	Ctx    context.Context
	Params entities.ListUsersParams
} {
	var calls []struct {
		Ctx    context.Context
		Params entities.ListUsersParams
	}
	mock.lockListUsers.RLock()
	calls = mock.calls.ListUsers
	mock.lockListUsers.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *RepositoryMock) Update(ctx context.Context, user entities.User) error {
	callInfo := struct {
		Ctx  context.Context
		User entities.User
	}{
		Ctx:  ctx,
		User: user,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	if mock.UpdateFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdateFunc(ctx, user)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedRepository.UpdateCalls())
func (mock *RepositoryMock) UpdateCalls() []struct {
	Ctx  context.Context
	User entities.User
} {
	var calls []struct {
		Ctx  context.Context
		User entities.User
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
