// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"go-template/domain/entities"
	"sync"
)

// RepositoryMock is a mock implementation of settings.Repository.
//
//	func TestSomethingThatUsesRepository(t *testing.T) {
//
//		// make and configure a mocked settings.Repository
//		mockedRepository := &RepositoryMock{
//			GetSettingFunc: func(ctx context.Context, key string) (any, error) {
//				panic("mock out the GetSetting method")
//			},
//			GetSettingsFunc: func(ctx context.Context) (*entities.SystemSettings, error) {
//				panic("mock out the GetSettings method")
//			},
//			SetSettingFunc: func(ctx context.Context, key string, value any) error {
//				panic("mock out the SetSetting method")
//			},
//			UpdateSettingsFunc: func(ctx context.Context, settings *entities.SystemSettings) error {
//				panic("mock out the UpdateSettings method")
//			},
//		}
//
//		// use mockedRepository in code that requires settings.Repository
//		// and then make assertions.
//
//	}
type RepositoryMock struct {
	// GetSettingFunc mocks the GetSetting method.
	GetSettingFunc func(ctx context.Context, key string) (any, error)

	// GetSettingsFunc mocks the GetSettings method.
	GetSettingsFunc func(ctx context.Context) (*entities.SystemSettings, error)

	// SetSettingFunc mocks the SetSetting method.
	SetSettingFunc func(ctx context.Context, key string, value any) error

	// UpdateSettingsFunc mocks the UpdateSettings method.
	UpdateSettingsFunc func(ctx context.Context, settings *entities.SystemSettings) error

	// calls tracks calls to the methods.
	calls struct {
		// GetSetting holds details about calls to the GetSetting method.
		GetSetting []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// GetSettings holds details about calls to the GetSettings method.
		GetSettings []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// SetSetting holds details about calls to the SetSetting method.
		SetSetting []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
			// Value is the value argument value.
			Value any
		}
		// UpdateSettings holds details about calls to the UpdateSettings method.
		UpdateSettings []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Settings is the settings argument value.
			Settings *entities.SystemSettings
		}
	}
	lockGetSetting     sync.RWMutex
	lockGetSettings    sync.RWMutex
	lockSetSetting     sync.RWMutex
	lockUpdateSettings sync.RWMutex
}

// GetSetting calls GetSettingFunc.
func (mock *RepositoryMock) GetSetting(ctx context.Context, key string) (any, error) {
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockGetSetting.Lock()
	mock.calls.GetSetting = append(mock.calls.GetSetting, callInfo)
	mock.lockGetSetting.Unlock()
	if mock.GetSettingFunc == nil {
		var (
			vOut   any
			errOut error
		)
		return vOut, errOut
	}
	return mock.GetSettingFunc(ctx, key)
}

// GetSettingCalls gets all the calls that were made to GetSetting.
// Check the length with:
//
//	len(mockedRepository.GetSettingCalls())
func (mock *RepositoryMock) GetSettingCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockGetSetting.RLock()
	calls = mock.calls.GetSetting
	mock.lockGetSetting.RUnlock()
	return calls
}

// GetSettings calls GetSettingsFunc.
func (mock *RepositoryMock) GetSettings(ctx context.Context) (*entities.SystemSettings, error) {
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetSettings.Lock()
	mock.calls.GetSettings = append(mock.calls.GetSettings, callInfo)
	mock.lockGetSettings.Unlock()
	if mock.GetSettingsFunc == nil {
		var (
			systemSettingsOut *entities.SystemSettings
			errOut            error
		)
		return systemSettingsOut, errOut
	}
	return mock.GetSettingsFunc(ctx)
}

// GetSettingsCalls gets all the calls that were made to GetSettings.
// Check the length with:
//
//	len(mockedRepository.GetSettingsCalls())
func (mock *RepositoryMock) GetSettingsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetSettings.RLock()
	calls = mock.calls.GetSettings
	mock.lockGetSettings.RUnlock()
	return calls
}

// SetSetting calls SetSettingFunc.
func (mock *RepositoryMock) SetSetting(ctx context.Context, key string, value any) error {
	callInfo := struct {
		Ctx   context.Context
		Key   string
		Value any
	}{
		Ctx:   ctx,
		Key:   key,
		Value: value,
	}
	mock.lockSetSetting.Lock()
	mock.calls.SetSetting = append(mock.calls.SetSetting, callInfo)
	mock.lockSetSetting.Unlock()
	if mock.SetSettingFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.SetSettingFunc(ctx, key, value)
}

// SetSettingCalls gets all the calls that were made to SetSetting.
// Check the length with:
//
//	len(mockedRepository.SetSettingCalls())
func (mock *RepositoryMock) SetSettingCalls() []struct {
	Ctx   context.Context
	Key   string
	Value any
} {
	var calls []struct {
		Ctx   context.Context
		Key   string
		Value any
	}
	mock.lockSetSetting.RLock()
	calls = mock.calls.SetSetting
	mock.lockSetSetting.RUnlock()
	return calls
}

// UpdateSettings calls UpdateSettingsFunc.
func (mock *RepositoryMock) UpdateSettings(ctx context.Context, settings *entities.SystemSettings) error {
	callInfo := struct {
		Ctx      context.Context
		Settings *entities.SystemSettings
	}{
		Ctx:      ctx,
		Settings: settings,
	}
	mock.lockUpdateSettings.Lock()
	mock.calls.UpdateSettings = append(mock.calls.UpdateSettings, callInfo)
	mock.lockUpdateSettings.Unlock()
	if mock.UpdateSettingsFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdateSettingsFunc(ctx, settings)
}

// UpdateSettingsCalls gets all the calls that were made to UpdateSettings.
// Check the length with:
//
//	len(mockedRepository.UpdateSettingsCalls())
func (mock *RepositoryMock) UpdateSettingsCalls() []struct {
	Ctx      context.Context
	Settings *entities.SystemSettings
} {
	var calls []struct {
		Ctx      context.Context
		Settings *entities.SystemSettings
	}
	mock.lockUpdateSettings.RLock()
	calls = mock.calls.UpdateSettings
	mock.lockUpdateSettings.RUnlock()
	return calls
}
