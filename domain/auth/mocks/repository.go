// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"go-template/domain/entities"
	"sync"
)

// RepositoryMock is a mock implementation of auth.Repository.
//
//	func TestSomethingThatUsesRepository(t *testing.T) {
//
//		// make and configure a mocked auth.Repository
//		mockedRepository := &RepositoryMock{
//			CreateFunc: func(ctx context.Context, user entities.User) error {
//				panic("mock out the Create method")
//			},
//			GetByEmailFunc: func(ctx context.Context, email string) (entities.User, error) {
//				panic("mock out the GetByEmail method")
//			},
//		}
//
//		// use mockedRepository in code that requires auth.Repository
//		// and then make assertions.
//
//	}
type RepositoryMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, user entities.User) error

	// GetByEmailFunc mocks the GetByEmail method.
	GetByEmailFunc func(ctx context.Context, email string) (entities.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// User is the user argument value.
			User entities.User
		}
		// GetByEmail holds details about calls to the GetByEmail method.
		GetByEmail []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Email is the email argument value.
			Email string
		}
	}
	lockCreate     sync.RWMutex
	lockGetByEmail sync.RWMutex
}

// Create calls CreateFunc.
func (mock *RepositoryMock) Create(ctx context.Context, user entities.User) error {
	callInfo := struct {
		Ctx  context.Context
		User entities.User
	}{
		Ctx:  ctx,
		User: user,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	if mock.CreateFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.CreateFunc(ctx, user)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedRepository.CreateCalls())
func (mock *RepositoryMock) CreateCalls() []struct {
	Ctx  context.Context
	User entities.User
} {
	var calls []struct {
		Ctx  context.Context
		User entities.User
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// GetByEmail calls GetByEmailFunc.
func (mock *RepositoryMock) GetByEmail(ctx context.Context, email string) (entities.User, error) {
	callInfo := struct {
		Ctx   context.Context
		Email string
	}{
		Ctx:   ctx,
		Email: email,
	}
	mock.lockGetByEmail.Lock()
	mock.calls.GetByEmail = append(mock.calls.GetByEmail, callInfo)
	mock.lockGetByEmail.Unlock()
	if mock.GetByEmailFunc == nil {
		var (
			userOut entities.User
			errOut  error
		)
		return userOut, errOut
	}
	return mock.GetByEmailFunc(ctx, email)
}

// GetByEmailCalls gets all the calls that were made to GetByEmail.
// Check the length with:
//
//	len(mockedRepository.GetByEmailCalls())
func (mock *RepositoryMock) GetByEmailCalls() []struct {
	Ctx   context.Context
	Email string
} {
	var calls []struct {
		Ctx   context.Context
		Email string
	}
	mock.lockGetByEmail.RLock()
	calls = mock.calls.GetByEmail
	mock.lockGetByEmail.RUnlock()
	return calls
}
