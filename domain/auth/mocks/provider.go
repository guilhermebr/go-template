// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"go-template/domain/entities"
	"sync"
)

// ProviderMock is a mock implementation of auth.Provider.
//
//	func TestSomethingThatUsesProvider(t *testing.T) {
//
//		// make and configure a mocked auth.Provider
//		mockedProvider := &ProviderMock{
//			LoginFunc: func(ctx context.Context, email string, password string) (string, error) {
//				panic("mock out the Login method")
//			},
//			ProviderFunc: func() string {
//				panic("mock out the Provider method")
//			},
//			RegisterUserFunc: func(ctx context.Context, email string, password string) (string, error) {
//				panic("mock out the RegisterUser method")
//			},
//			ValidateTokenFunc: func(ctx context.Context, token string) (*entities.User, error) {
//				panic("mock out the ValidateToken method")
//			},
//		}
//
//		// use mockedProvider in code that requires auth.Provider
//		// and then make assertions.
//
//	}
type ProviderMock struct {
	// LoginFunc mocks the Login method.
	LoginFunc func(ctx context.Context, email string, password string) (string, error)

	// ProviderFunc mocks the Provider method.
	ProviderFunc func() string

	// RegisterUserFunc mocks the RegisterUser method.
	RegisterUserFunc func(ctx context.Context, email string, password string) (string, error)

	// ValidateTokenFunc mocks the ValidateToken method.
	ValidateTokenFunc func(ctx context.Context, token string) (*entities.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// Login holds details about calls to the Login method.
		Login []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Email is the email argument value.
			Email string
			// Password is the password argument value.
			Password string
		}
		// Provider holds details about calls to the Provider method.
		Provider []struct {
		}
		// RegisterUser holds details about calls to the RegisterUser method.
		RegisterUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Email is the email argument value.
			Email string
			// Password is the password argument value.
			Password string
		}
		// ValidateToken holds details about calls to the ValidateToken method.
		ValidateToken []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
		}
	}
	lockLogin         sync.RWMutex
	lockProvider      sync.RWMutex
	lockRegisterUser  sync.RWMutex
	lockValidateToken sync.RWMutex
}

// Login calls LoginFunc.
func (mock *ProviderMock) Login(ctx context.Context, email string, password string) (string, error) {
	callInfo := struct {
		Ctx      context.Context
		Email    string
		Password string
	}{
		Ctx:      ctx,
		Email:    email,
		Password: password,
	}
	mock.lockLogin.Lock()
	mock.calls.Login = append(mock.calls.Login, callInfo)
	mock.lockLogin.Unlock()
	if mock.LoginFunc == nil {
		var (
			sOut   string
			errOut error
		)
		return sOut, errOut
	}
	return mock.LoginFunc(ctx, email, password)
}

// LoginCalls gets all the calls that were made to Login.
// Check the length with:
//
//	len(mockedProvider.LoginCalls())
func (mock *ProviderMock) LoginCalls() []struct {
	Ctx      context.Context
	Email    string
	Password string
} {
	var calls []struct {
		Ctx      context.Context
		Email    string
		Password string
	}
	mock.lockLogin.RLock()
	calls = mock.calls.Login
	mock.lockLogin.RUnlock()
	return calls
}

// Provider calls ProviderFunc.
func (mock *ProviderMock) Provider() string {
	callInfo := struct {
	}{}
	mock.lockProvider.Lock()
	mock.calls.Provider = append(mock.calls.Provider, callInfo)
	mock.lockProvider.Unlock()
	if mock.ProviderFunc == nil {
		var (
			sOut string
		)
		return sOut
	}
	return mock.ProviderFunc()
}

// ProviderCalls gets all the calls that were made to Provider.
// Check the length with:
//
//	len(mockedProvider.ProviderCalls())
func (mock *ProviderMock) ProviderCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockProvider.RLock()
	calls = mock.calls.Provider
	mock.lockProvider.RUnlock()
	return calls
}

// RegisterUser calls RegisterUserFunc.
func (mock *ProviderMock) RegisterUser(ctx context.Context, email string, password string) (string, error) {
	callInfo := struct {
		Ctx      context.Context
		Email    string
		Password string
	}{
		Ctx:      ctx,
		Email:    email,
		Password: password,
	}
	mock.lockRegisterUser.Lock()
	mock.calls.RegisterUser = append(mock.calls.RegisterUser, callInfo)
	mock.lockRegisterUser.Unlock()
	if mock.RegisterUserFunc == nil {
		var (
			sOut   string
			errOut error
		)
		return sOut, errOut
	}
	return mock.RegisterUserFunc(ctx, email, password)
}

// RegisterUserCalls gets all the calls that were made to RegisterUser.
// Check the length with:
//
//	len(mockedProvider.RegisterUserCalls())
func (mock *ProviderMock) RegisterUserCalls() []struct {
	Ctx      context.Context
	Email    string
	Password string
} {
	var calls []struct {
		Ctx      context.Context
		Email    string
		Password string
	}
	mock.lockRegisterUser.RLock()
	calls = mock.calls.RegisterUser
	mock.lockRegisterUser.RUnlock()
	return calls
}

// ValidateToken calls ValidateTokenFunc.
func (mock *ProviderMock) ValidateToken(ctx context.Context, token string) (*entities.User, error) {
	callInfo := struct {
		Ctx   context.Context
		Token string
	}{
		Ctx:   ctx,
		Token: token,
	}
	mock.lockValidateToken.Lock()
	mock.calls.ValidateToken = append(mock.calls.ValidateToken, callInfo)
	mock.lockValidateToken.Unlock()
	if mock.ValidateTokenFunc == nil {
		var (
			userOut *entities.User
			errOut  error
		)
		return userOut, errOut
	}
	return mock.ValidateTokenFunc(ctx, token)
}

// ValidateTokenCalls gets all the calls that were made to ValidateToken.
// Check the length with:
//
//	len(mockedProvider.ValidateTokenCalls())
func (mock *ProviderMock) ValidateTokenCalls() []struct {
	Ctx   context.Context
	Token string
} {
	var calls []struct {
		Ctx   context.Context
		Token string
	}
	mock.lockValidateToken.RLock()
	calls = mock.calls.ValidateToken
	mock.lockValidateToken.RUnlock()
	return calls
}
