// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"go-template/domain/auth"
	"sync"
)

// AuthProviderFactoryMock is a mock implementation of auth.AuthProviderFactory.
//
//	func TestSomethingThatUsesAuthProviderFactory(t *testing.T) {
//
//		// make and configure a mocked auth.AuthProviderFactory
//		mockedAuthProviderFactory := &AuthProviderFactoryMock{
//			CreateProviderFunc: func(providerName string) (auth.Provider, error) {
//				panic("mock out the CreateProvider method")
//			},
//			GetSupportedProvidersFunc: func() []string {
//				panic("mock out the GetSupportedProviders method")
//			},
//		}
//
//		// use mockedAuthProviderFactory in code that requires auth.AuthProviderFactory
//		// and then make assertions.
//
//	}
type AuthProviderFactoryMock struct {
	// CreateProviderFunc mocks the CreateProvider method.
	CreateProviderFunc func(providerName string) (auth.Provider, error)

	// GetSupportedProvidersFunc mocks the GetSupportedProviders method.
	GetSupportedProvidersFunc func() []string

	// calls tracks calls to the methods.
	calls struct {
		// CreateProvider holds details about calls to the CreateProvider method.
		CreateProvider []struct {
			// ProviderName is the providerName argument value.
			ProviderName string
		}
		// GetSupportedProviders holds details about calls to the GetSupportedProviders method.
		GetSupportedProviders []struct {
		}
	}
	lockCreateProvider        sync.RWMutex
	lockGetSupportedProviders sync.RWMutex
}

// CreateProvider calls CreateProviderFunc.
func (mock *AuthProviderFactoryMock) CreateProvider(providerName string) (auth.Provider, error) {
	callInfo := struct {
		ProviderName string
	}{
		ProviderName: providerName,
	}
	mock.lockCreateProvider.Lock()
	mock.calls.CreateProvider = append(mock.calls.CreateProvider, callInfo)
	mock.lockCreateProvider.Unlock()
	if mock.CreateProviderFunc == nil {
		var (
			providerOut auth.Provider
			errOut      error
		)
		return providerOut, errOut
	}
	return mock.CreateProviderFunc(providerName)
}

// CreateProviderCalls gets all the calls that were made to CreateProvider.
// Check the length with:
//
//	len(mockedAuthProviderFactory.CreateProviderCalls())
func (mock *AuthProviderFactoryMock) CreateProviderCalls() []struct {
	ProviderName string
} {
	var calls []struct {
		ProviderName string
	}
	mock.lockCreateProvider.RLock()
	calls = mock.calls.CreateProvider
	mock.lockCreateProvider.RUnlock()
	return calls
}

// GetSupportedProviders calls GetSupportedProvidersFunc.
func (mock *AuthProviderFactoryMock) GetSupportedProviders() []string {
	callInfo := struct {
	}{}
	mock.lockGetSupportedProviders.Lock()
	mock.calls.GetSupportedProviders = append(mock.calls.GetSupportedProviders, callInfo)
	mock.lockGetSupportedProviders.Unlock()
	if mock.GetSupportedProvidersFunc == nil {
		var (
			stringsOut []string
		)
		return stringsOut
	}
	return mock.GetSupportedProvidersFunc()
}

// GetSupportedProvidersCalls gets all the calls that were made to GetSupportedProviders.
// Check the length with:
//
//	len(mockedAuthProviderFactory.GetSupportedProvidersCalls())
func (mock *AuthProviderFactoryMock) GetSupportedProvidersCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetSupportedProviders.RLock()
	calls = mock.calls.GetSupportedProviders
	mock.lockGetSupportedProviders.RUnlock()
	return calls
}
