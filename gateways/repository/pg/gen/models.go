// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package gen

import (
	"database/sql/driver"
	"fmt"
	"time"

	uuid "github.com/gofrs/uuid/v5"
)

type AccountType string

const (
	AccountTypeUser       AccountType = "user"
	AccountTypeAdmin      AccountType = "admin"
	AccountTypeSuperAdmin AccountType = "super_admin"
)

func (e *AccountType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountType(s)
	case string:
		*e = AccountType(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountType: %T", src)
	}
	return nil
}

type NullAccountType struct {
	AccountType AccountType `json:"accountType"`
	Valid       bool        `json:"valid"` // Valid is true if AccountType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountType) Scan(value interface{}) error {
	if value == nil {
		ns.AccountType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccountType), nil
}

type AdminSetting struct {
	Key       string     `json:"key"`
	Value     []byte     `json:"value"`
	CreatedAt *time.Time `json:"createdAt"`
	UpdatedAt *time.Time `json:"updatedAt"`
}

type Example struct {
	ID        uuid.UUID `json:"id"`
	Title     string    `json:"title"`
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
}

type User struct {
	ID             uuid.UUID   `json:"id"`
	Email          string      `json:"email"`
	AuthProvider   string      `json:"authProvider"`
	AuthProviderID *string     `json:"authProviderId"`
	AccountType    AccountType `json:"accountType"`
	CreatedAt      *time.Time  `json:"createdAt"`
	UpdatedAt      *time.Time  `json:"updatedAt"`
}
