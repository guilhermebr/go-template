// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package gen

import (
	"context"
	"time"

	uuid "github.com/gofrs/uuid/v5"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id, email, auth_provider, auth_provider_id, account_type, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type CreateUserParams struct {
	ID             uuid.UUID   `json:"id"`
	Email          string      `json:"email"`
	AuthProvider   string      `json:"authProvider"`
	AuthProviderID *string     `json:"authProviderId"`
	AccountType    AccountType `json:"accountType"`
	CreatedAt      *time.Time  `json:"createdAt"`
	UpdatedAt      *time.Time  `json:"updatedAt"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.AuthProvider,
		arg.AuthProviderID,
		arg.AccountType,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByAuthProviderID = `-- name: GetUserByAuthProviderID :one
SELECT id, email, auth_provider, auth_provider_id, account_type, created_at, updated_at
FROM users
WHERE auth_provider = $1 AND auth_provider_id = $2
`

func (q *Queries) GetUserByAuthProviderID(ctx context.Context, authProvider string, authProviderID *string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByAuthProviderID, authProvider, authProviderID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.AuthProvider,
		&i.AuthProviderID,
		&i.AccountType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, auth_provider, auth_provider_id, account_type, created_at, updated_at
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.AuthProvider,
		&i.AuthProviderID,
		&i.AccountType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, auth_provider, auth_provider_id, account_type, created_at, updated_at
FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.AuthProvider,
		&i.AuthProviderID,
		&i.AccountType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET email = $2, auth_provider = $3, auth_provider_id = $4, account_type = $5, updated_at = $6
WHERE id = $1
`

type UpdateUserParams struct {
	ID             uuid.UUID   `json:"id"`
	Email          string      `json:"email"`
	AuthProvider   string      `json:"authProvider"`
	AuthProviderID *string     `json:"authProviderId"`
	AccountType    AccountType `json:"accountType"`
	UpdatedAt      *time.Time  `json:"updatedAt"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.AuthProvider,
		arg.AuthProviderID,
		arg.AccountType,
		arg.UpdatedAt,
	)
	return err
}
