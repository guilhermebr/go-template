// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: admin_settings.sql

package gen

import (
	"context"
)

const bulkUpsertAdminSettings = `-- name: BulkUpsertAdminSettings :exec
WITH setting_updates(key, value) AS (
    SELECT unnest($1::text[]), unnest($2::jsonb[])
)
INSERT INTO admin_settings (key, value, updated_at) 
SELECT key, value, now() FROM setting_updates
ON CONFLICT (key) 
DO UPDATE SET 
    value = EXCLUDED.value,
    updated_at = now()
`

func (q *Queries) BulkUpsertAdminSettings(ctx context.Context, column1 []string, column2 [][]byte) error {
	_, err := q.db.Exec(ctx, bulkUpsertAdminSettings, column1, column2)
	return err
}

const deleteAdminSetting = `-- name: DeleteAdminSetting :exec
DELETE FROM admin_settings 
WHERE key = $1
`

func (q *Queries) DeleteAdminSetting(ctx context.Context, key string) error {
	_, err := q.db.Exec(ctx, deleteAdminSetting, key)
	return err
}

const getAdminSetting = `-- name: GetAdminSetting :one
SELECT key, value, created_at, updated_at 
FROM admin_settings
WHERE key = $1
`

func (q *Queries) GetAdminSetting(ctx context.Context, key string) (AdminSetting, error) {
	row := q.db.QueryRow(ctx, getAdminSetting, key)
	var i AdminSetting
	err := row.Scan(
		&i.Key,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllAdminSettings = `-- name: GetAllAdminSettings :many
SELECT key, value, created_at, updated_at 
FROM admin_settings
ORDER BY key
`

func (q *Queries) GetAllAdminSettings(ctx context.Context) ([]AdminSetting, error) {
	rows, err := q.db.Query(ctx, getAllAdminSettings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AdminSetting
	for rows.Next() {
		var i AdminSetting
		if err := rows.Scan(
			&i.Key,
			&i.Value,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertAdminSetting = `-- name: UpsertAdminSetting :exec
INSERT INTO admin_settings (key, value, updated_at) 
VALUES ($1, $2, now())
ON CONFLICT (key) 
DO UPDATE SET 
    value = EXCLUDED.value,
    updated_at = now()
`

func (q *Queries) UpsertAdminSetting(ctx context.Context, key string, value []byte) error {
	_, err := q.db.Exec(ctx, upsertAdminSetting, key, value)
	return err
}
